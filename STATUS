----------
2011-7-25:

Back from my conference, less than a week to go before JSM in
Miami where this initial work will be discussed.

Next steps: try to fix up the array set/get properly for the
trivial case (atomic elements only).  And whiteknight is trying
to offer advice on compiling a code example to improve the
benchmarks.

----------
2011-7-20:

Attending a conference and trying to study Whiteknight's
matrixy, so I'm stalled for the moment.

----------
2011-7-18:

See yesterday's comment.  I think many of the problems I'm now
running into are a result of my trying to adapt squaak.  I need
to move closer to the grammar design of whiteknight's matrixy,
particular with regards to assignment and [ ] handling.

It may also be that the whitespace handling and end-of-lines need
to be handled in the grammar differently to support R-style
interpretation interactively.  Not sure about that one.

----------
2011-7-17:

Started implementing a test script in t/ that is catching stuff,
mostly related to my moving to vector objects and strings.
Added the ! operator, vectorized.  Short and elegant, works on
strings sensibly, too.

Starting to feel like I'm understanding more.  I think studying
whiteknight's matrixy grammer/action file would be wise, because
I think some of my problems at this point are inherited from
squaak.  A good learning tool, but...

----------
2011-7-16:

Huge progress, with two big assists from moritz++.  I
vectorized the basic math operators and the comparison
operators, R-style.  Then, I noticed that all my work
on the Fixed*Array design broke a few things -- like the
basic while loop.  The problem is that under the hood
in the implementation of the language, literals were expected
in places where Fixed*Arrays of length 1 were arriving.
See the Actions.pm file while() loop method for the solution.

I also noticed some real performance issues in basic benchmarking.
May have to rethink this Fixed*Array design, though I worry
that the additional checking to support literals and arrays in
objects may be just as bad as the apparent overhead of using the
arrays.  And of course we want arrays, anyway.  At this point,
I'm not sure what is likely my fault, and what may be a parrot
performance issue.  I'll assume it's my fault at this point.

----------
2011-7-15:

Cleaned up some runtime functions for the Fixed*Array
design.  Wrote a blog showing state of progress.

----------
2011-7-14:

Some progress on using GSL from PIR and NQR, putting the
GSL project on temporary hold; see that GSL STATUS file.

Started making everything a Fixed*Array.  Likely to make
things much simpler, but of course will require some changes
from many of the current runtime functions.

----------
2011-7-12:

Working on the GSL material, which will pay off here fairly
soon I think.  This NCI is critical in the long run.
However, I need to keep an eye on time left and deliverables
before the JSM talk... discuss with Mike.

---------
2011-7-9:

NCI success!

In R's source tree, src/nmath/standalone,
    make
    make install
This creates /usr/local/lib64/libRmath.so and we may need
to add to LD_LIBRARY_PATH for this to work (and I did it).
Now in C/C++, we would need (but don't need to worry in Parrot):
     #define MATHLIB_STANDALONE
     #include <Rmath.h>
and the linking flag -lRmath.

GOOD NEWS: It worked!  My first real independent success.
Also, bubaflub pointed to his GSOC project that would be
worth looking at:
    http://www.parrot.org/content/introducing-parrot-gmp
    http://github.com/bubaflub/parrot-gmp


---------
2011-7-8:

A little "todo" list for Jay in the next week or two:

- NCI example(s), at least generating random normals by using
the R libraries, and possibly something from the Parrot world,
like providing R-syntax regular expressions?

- Look into the mmap

- The possibility of a graphics kludge via d3 and javascript?

- Try to fix up the 'for' loop properly.

- Move up to 3.6.0 and try to get proper inheritance working.


---------
2011-7-8:

Creating the github repository.  At this point, the hack of
the squaak language still has some squaakish characteristics.

- Using Parrot 3.3.0 (will upgrade I hope soon)

- I haven't quite got the new 'for' action working (trying two
approaches).

- I have some basic class definitions, but haven't really done
anything and need to figure out inheritance (maybe Parrot 3.6.0
will help, arriving next week).

- I've done some things that may "look right" but aren't done
the "right way".  Advice is welcome, to help me learn.

